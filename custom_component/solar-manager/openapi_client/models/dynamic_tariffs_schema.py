# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.model32 import Model32

class DynamicTariffsSchema(BaseModel):
    """
    DynamicTariffsSchema
    """
    provider: Optional[StrictStr] = None
    area: Optional[StrictStr] = None
    prices: Optional[conlist(Model32)] = None
    currency: Optional[StrictStr] = None
    resolution_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="resolutionMinutes")
    __properties = ["provider", "area", "prices", "currency", "resolutionMinutes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DynamicTariffsSchema:
        """Create an instance of DynamicTariffsSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item in self.prices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DynamicTariffsSchema:
        """Create an instance of DynamicTariffsSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DynamicTariffsSchema.parse_obj(obj)

        _obj = DynamicTariffsSchema.parse_obj({
            "provider": obj.get("provider"),
            "area": obj.get("area"),
            "prices": [Model32.from_dict(_item) for _item in obj.get("prices")] if obj.get("prices") is not None else None,
            "currency": obj.get("currency"),
            "resolution_minutes": obj.get("resolutionMinutes")
        })
        return _obj



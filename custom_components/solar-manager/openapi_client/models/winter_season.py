# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.model10 import Model10
from openapi_client.models.model12 import Model12
from openapi_client.models.model14 import Model14

class WinterSeason(BaseModel):
    """
    WinterSeason
    """
    monday_friday: Optional[conlist(Model10)] = Field(default=None, alias="mondayFriday")
    saturday: Optional[conlist(Model12)] = None
    sunday: Optional[conlist(Model14)] = None
    __properties = ["mondayFriday", "saturday", "sunday"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WinterSeason:
        """Create an instance of WinterSeason from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in monday_friday (list)
        _items = []
        if self.monday_friday:
            for _item in self.monday_friday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mondayFriday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in saturday (list)
        _items = []
        if self.saturday:
            for _item in self.saturday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['saturday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sunday (list)
        _items = []
        if self.sunday:
            for _item in self.sunday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sunday'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WinterSeason:
        """Create an instance of WinterSeason from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WinterSeason.parse_obj(obj)

        _obj = WinterSeason.parse_obj({
            "monday_friday": [Model10.from_dict(_item) for _item in obj.get("mondayFriday")] if obj.get("mondayFriday") is not None else None,
            "saturday": [Model12.from_dict(_item) for _item in obj.get("saturday")] if obj.get("saturday") is not None else None,
            "sunday": [Model14.from_dict(_item) for _item in obj.get("sunday")] if obj.get("sunday") is not None else None
        })
        return _obj



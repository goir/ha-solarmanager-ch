# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UserSchema(BaseModel):
    """
    UserSchema
    """
    first_name: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    zip: Optional[StrictStr] = None
    plant: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = None
    company: Optional[StrictStr] = Field(default=None, description="Installer")
    connected_oem: Optional[StrictStr] = Field(default=None, alias="connectedOem")
    __properties = ["first_name", "user_id", "last_name", "email", "status", "country", "city", "zip", "plant", "company_name", "company", "connectedOem"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSchema:
        """Create an instance of UserSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSchema:
        """Create an instance of UserSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSchema.parse_obj(obj)

        _obj = UserSchema.parse_obj({
            "first_name": obj.get("first_name"),
            "user_id": obj.get("user_id"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "status": obj.get("status"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "plant": obj.get("plant"),
            "company_name": obj.get("company_name"),
            "company": obj.get("company"),
            "connected_oem": obj.get("connectedOem")
        })
        return _obj



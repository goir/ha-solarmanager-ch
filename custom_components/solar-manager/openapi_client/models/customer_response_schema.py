# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CustomerResponseSchema(BaseModel):
    """
    CustomerResponseSchema
    """
    user_id: StrictStr = Field(...)
    first_name: StrictStr = Field(...)
    last_name: StrictStr = Field(...)
    email: StrictStr = Field(...)
    zip: StrictStr = Field(...)
    language: StrictStr = Field(...)
    status: StrictStr = Field(...)
    installation_finished: Optional[StrictBool] = False
    sm_id: Optional[StrictStr] = ''
    gateway_id: Optional[StrictStr] = None
    registration_date: datetime = Field(...)
    license: StrictStr = Field(...)
    subscription_details: StrictStr = Field(...)
    energy_assistant_enable: StrictBool = Field(...)
    device_count: StrictInt = Field(...)
    car_count: StrictInt = Field(...)
    end_date: Optional[datetime] = None
    k_wp: Optional[StrictInt] = Field(default=None, alias="kWp")
    __properties = ["user_id", "first_name", "last_name", "email", "zip", "language", "status", "installation_finished", "sm_id", "gateway_id", "registration_date", "license", "subscription_details", "energy_assistant_enable", "device_count", "car_count", "end_date", "kWp"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerResponseSchema:
        """Create an instance of CustomerResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerResponseSchema:
        """Create an instance of CustomerResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerResponseSchema.parse_obj(obj)

        _obj = CustomerResponseSchema.parse_obj({
            "user_id": obj.get("user_id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "zip": obj.get("zip"),
            "language": obj.get("language"),
            "status": obj.get("status"),
            "installation_finished": obj.get("installation_finished") if obj.get("installation_finished") is not None else False,
            "sm_id": obj.get("sm_id") if obj.get("sm_id") is not None else '',
            "gateway_id": obj.get("gateway_id"),
            "registration_date": obj.get("registration_date"),
            "license": obj.get("license"),
            "subscription_details": obj.get("subscription_details"),
            "energy_assistant_enable": obj.get("energy_assistant_enable"),
            "device_count": obj.get("device_count"),
            "car_count": obj.get("car_count"),
            "end_date": obj.get("end_date"),
            "k_wp": obj.get("kWp")
        })
        return _obj



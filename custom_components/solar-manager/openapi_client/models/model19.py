# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.gateway_info_schema import GatewayInfoSchema
from openapi_client.models.model18 import Model18
from openapi_client.models.user_schema import UserSchema
from openapi_client.models.versions import Versions

class Model19(BaseModel):
    """
    Model19
    """
    gateway: Optional[GatewayInfoSchema] = None
    settings: Optional[Model18] = None
    user: Optional[UserSchema] = None
    versions: Optional[Versions] = None
    __properties = ["gateway", "settings", "user", "versions"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model19:
        """Create an instance of Model19 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of versions
        if self.versions:
            _dict['versions'] = self.versions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model19:
        """Create an instance of Model19 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model19.parse_obj(obj)

        _obj = Model19.parse_obj({
            "gateway": GatewayInfoSchema.from_dict(obj.get("gateway")) if obj.get("gateway") is not None else None,
            "settings": Model18.from_dict(obj.get("settings")) if obj.get("settings") is not None else None,
            "user": UserSchema.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "versions": Versions.from_dict(obj.get("versions")) if obj.get("versions") is not None else None
        })
        return _obj



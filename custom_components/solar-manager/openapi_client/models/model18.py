# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class Model18(BaseModel):
    """
    Model18
    """
    offset_watt: Optional[StrictInt] = None
    low_m_f_from: Optional[StrictStr] = None
    low_m_f_to: Optional[StrictStr] = None
    low_sat_from: Optional[StrictStr] = None
    low_sat_to: Optional[StrictStr] = None
    low_sun_from: Optional[StrictStr] = None
    low_sun_to: Optional[StrictStr] = None
    k_wp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="kWp")
    house_fuse: Optional[StrictInt] = Field(default=None, alias="houseFuse")
    load_management: Optional[StrictBool] = Field(default=None, alias="loadManagement")
    __properties = ["offset_watt", "low_m_f_from", "low_m_f_to", "low_sat_from", "low_sat_to", "low_sun_from", "low_sun_to", "kWp", "houseFuse", "loadManagement"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model18:
        """Create an instance of Model18 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model18:
        """Create an instance of Model18 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model18.parse_obj(obj)

        _obj = Model18.parse_obj({
            "offset_watt": obj.get("offset_watt"),
            "low_m_f_from": obj.get("low_m_f_from"),
            "low_m_f_to": obj.get("low_m_f_to"),
            "low_sat_from": obj.get("low_sat_from"),
            "low_sat_to": obj.get("low_sat_to"),
            "low_sun_from": obj.get("low_sun_from"),
            "low_sun_to": obj.get("low_sun_to"),
            "k_wp": obj.get("kWp"),
            "house_fuse": obj.get("houseFuse"),
            "load_management": obj.get("loadManagement")
        })
        return _obj



# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.car_chargers import CarChargers
from openapi_client.models.heatpumps import Heatpumps
from openapi_client.models.v2x_chargers import V2xChargers
from openapi_client.models.water_heaters import WaterHeaters

class TotalEnergy(BaseModel):
    """
    TotalEnergy
    """
    car_chargers: Optional[CarChargers] = Field(default=None, alias="carChargers")
    water_heaters: Optional[WaterHeaters] = Field(default=None, alias="waterHeaters")
    heatpumps: Optional[Heatpumps] = None
    v2x_chargers: Optional[V2xChargers] = Field(default=None, alias="v2xChargers")
    __properties = ["carChargers", "waterHeaters", "heatpumps", "v2xChargers"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TotalEnergy:
        """Create an instance of TotalEnergy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of car_chargers
        if self.car_chargers:
            _dict['carChargers'] = self.car_chargers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of water_heaters
        if self.water_heaters:
            _dict['waterHeaters'] = self.water_heaters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of heatpumps
        if self.heatpumps:
            _dict['heatpumps'] = self.heatpumps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v2x_chargers
        if self.v2x_chargers:
            _dict['v2xChargers'] = self.v2x_chargers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TotalEnergy:
        """Create an instance of TotalEnergy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TotalEnergy.parse_obj(obj)

        _obj = TotalEnergy.parse_obj({
            "car_chargers": CarChargers.from_dict(obj.get("carChargers")) if obj.get("carChargers") is not None else None,
            "water_heaters": WaterHeaters.from_dict(obj.get("waterHeaters")) if obj.get("waterHeaters") is not None else None,
            "heatpumps": Heatpumps.from_dict(obj.get("heatpumps")) if obj.get("heatpumps") is not None else None,
            "v2x_chargers": V2xChargers.from_dict(obj.get("v2xChargers")) if obj.get("v2xChargers") is not None else None
        })
        return _obj



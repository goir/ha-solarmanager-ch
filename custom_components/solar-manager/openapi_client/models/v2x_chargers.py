# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from openapi_client.models.charged import Charged
from openapi_client.models.discharged import Discharged

class V2xChargers(BaseModel):
    """
    V2xChargers
    """
    total: Optional[Union[StrictFloat, StrictInt]] = None
    charged: Optional[Charged] = None
    discharged: Optional[Discharged] = None
    __properties = ["total", "charged", "discharged"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V2xChargers:
        """Create an instance of V2xChargers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of charged
        if self.charged:
            _dict['charged'] = self.charged.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discharged
        if self.discharged:
            _dict['discharged'] = self.discharged.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V2xChargers:
        """Create an instance of V2xChargers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V2xChargers.parse_obj(obj)

        _obj = V2xChargers.parse_obj({
            "total": obj.get("total"),
            "charged": Charged.from_dict(obj.get("charged")) if obj.get("charged") is not None else None,
            "discharged": Discharged.from_dict(obj.get("discharged")) if obj.get("discharged") is not None else None
        })
        return _obj



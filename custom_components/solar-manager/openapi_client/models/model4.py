# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class Model4(BaseModel):
    """
    Model4
    """
    current_energy_purchase_tariff1: Optional[StrictInt] = Field(default=None, alias="CurrentEnergyPurchaseTariff1", description="Purchase tariff 1")
    current_energy_purchase_tariff2: Optional[StrictInt] = Field(default=None, alias="CurrentEnergyPurchaseTariff2", description="Purchase tariff 2")
    current_energy_delivery_tariff1: Optional[StrictInt] = Field(default=None, alias="CurrentEnergyDeliveryTariff1", description="Delivery tariff 1")
    current_energy_delivery_tariff2: Optional[StrictInt] = Field(default=None, alias="CurrentEnergyDeliveryTariff2", description="Delivery tariff 2")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    __properties = ["CurrentEnergyPurchaseTariff1", "CurrentEnergyPurchaseTariff2", "CurrentEnergyDeliveryTariff1", "CurrentEnergyDeliveryTariff2", "createdAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model4:
        """Create an instance of Model4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model4:
        """Create an instance of Model4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model4.parse_obj(obj)

        _obj = Model4.parse_obj({
            "current_energy_purchase_tariff1": obj.get("CurrentEnergyPurchaseTariff1"),
            "current_energy_purchase_tariff2": obj.get("CurrentEnergyPurchaseTariff2"),
            "current_energy_delivery_tariff1": obj.get("CurrentEnergyDeliveryTariff1"),
            "current_energy_delivery_tariff2": obj.get("CurrentEnergyDeliveryTariff2"),
            "created_at": obj.get("createdAt")
        })
        return _obj



# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import datetime
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.last_data_device_schema import LastDataDeviceSchema

class LastDataFromGatewaySchema(BaseModel):
    """
    LastDataFromGatewaySchema
    """
    interface_version: Optional[StrictStr] = Field(default=None, alias="Interface_Version")
    time_stamp: Optional[datetime.datetime] = Field(default=None, alias="TimeStamp")
    current_power_consumption: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPowerConsumption", description="power consumption in W")
    current_pv_generation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentPvGeneration", description="generated power in W")
    current_battery_charge_discharge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currentBatteryChargeDischarge", description="power discharge in W")
    soc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="battery capacity")
    devices: Optional[conlist(LastDataDeviceSchema)] = None
    __properties = ["Interface_Version", "TimeStamp", "currentPowerConsumption", "currentPvGeneration", "currentBatteryChargeDischarge", "soc", "devices"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LastDataFromGatewaySchema:
        """Create an instance of LastDataFromGatewaySchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item in self.devices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['devices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LastDataFromGatewaySchema:
        """Create an instance of LastDataFromGatewaySchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LastDataFromGatewaySchema.parse_obj(obj)

        _obj = LastDataFromGatewaySchema.parse_obj({
            "interface_version": obj.get("Interface_Version"),
            "time_stamp": obj.get("TimeStamp"),
            "current_power_consumption": obj.get("currentPowerConsumption"),
            "current_pv_generation": obj.get("currentPvGeneration"),
            "current_battery_charge_discharge": obj.get("currentBatteryChargeDischarge"),
            "soc": obj.get("soc"),
            "devices": [LastDataDeviceSchema.from_dict(_item) for _item in obj.get("devices")] if obj.get("devices") is not None else None
        })
        return _obj



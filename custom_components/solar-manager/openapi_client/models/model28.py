# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from openapi_client.models.model23 import Model23
from openapi_client.models.model27 import Model27

class Model28(BaseModel):
    """
    Model28
    """
    low_tariff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lowTariff")
    high_tariff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="highTariff")
    tariff_type: Optional[StrictStr] = Field(default=None, alias="tariffType")
    single_tariff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="singleTariff")
    provider: Optional[StrictStr] = None
    is_winter_time_enabled: Optional[StrictBool] = Field(default=None, alias="isWinterTimeEnabled")
    common_seasons: Optional[Model23] = Field(default=None, alias="commonSeasons")
    winter_season: Optional[Model27] = Field(default=None, alias="winterSeason")
    direct_marketing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="directMarketing")
    __properties = ["lowTariff", "highTariff", "tariffType", "singleTariff", "provider", "isWinterTimeEnabled", "commonSeasons", "winterSeason", "directMarketing"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model28:
        """Create an instance of Model28 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of common_seasons
        if self.common_seasons:
            _dict['commonSeasons'] = self.common_seasons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of winter_season
        if self.winter_season:
            _dict['winterSeason'] = self.winter_season.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model28:
        """Create an instance of Model28 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model28.parse_obj(obj)

        _obj = Model28.parse_obj({
            "low_tariff": obj.get("lowTariff"),
            "high_tariff": obj.get("highTariff"),
            "tariff_type": obj.get("tariffType"),
            "single_tariff": obj.get("singleTariff"),
            "provider": obj.get("provider"),
            "is_winter_time_enabled": obj.get("isWinterTimeEnabled"),
            "common_seasons": Model23.from_dict(obj.get("commonSeasons")) if obj.get("commonSeasons") is not None else None,
            "winter_season": Model27.from_dict(obj.get("winterSeason")) if obj.get("winterSeason") is not None else None,
            "direct_marketing": obj.get("directMarketing")
        })
        return _obj



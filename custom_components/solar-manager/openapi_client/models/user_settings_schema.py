# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from openapi_client.models.common_seasons import CommonSeasons
from openapi_client.models.winter_season import WinterSeason

class UserSettingsSchema(BaseModel):
    """
    UserSettingsSchema
    """
    offset_watt: Optional[StrictInt] = None
    low_m_f_from: Optional[StrictStr] = None
    low_m_f_to: Optional[StrictStr] = None
    low_sat_from: Optional[StrictStr] = None
    low_sat_to: Optional[StrictStr] = None
    low_sun_from: Optional[StrictStr] = None
    low_sun_to: Optional[StrictStr] = None
    k_wp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="kWp")
    house_fuse: Optional[StrictInt] = Field(default=None, alias="houseFuse")
    load_management: Optional[StrictBool] = Field(default=None, alias="loadManagement")
    common_seasons: Optional[CommonSeasons] = Field(default=None, alias="commonSeasons")
    high_tariff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="highTariff")
    is_winter_time_enabled: Optional[StrictBool] = Field(default=None, alias="isWinterTimeEnabled")
    low_tariff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lowTariff")
    provider: Optional[StrictStr] = None
    tariff_type: Optional[StrictStr] = Field(default=None, alias="tariffType")
    winter_season: Optional[WinterSeason] = Field(default=None, alias="winterSeason")
    __properties = ["offset_watt", "low_m_f_from", "low_m_f_to", "low_sat_from", "low_sat_to", "low_sun_from", "low_sun_to", "kWp", "houseFuse", "loadManagement", "commonSeasons", "highTariff", "isWinterTimeEnabled", "lowTariff", "provider", "tariffType", "winterSeason"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSettingsSchema:
        """Create an instance of UserSettingsSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of common_seasons
        if self.common_seasons:
            _dict['commonSeasons'] = self.common_seasons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of winter_season
        if self.winter_season:
            _dict['winterSeason'] = self.winter_season.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSettingsSchema:
        """Create an instance of UserSettingsSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSettingsSchema.parse_obj(obj)

        _obj = UserSettingsSchema.parse_obj({
            "offset_watt": obj.get("offset_watt"),
            "low_m_f_from": obj.get("low_m_f_from"),
            "low_m_f_to": obj.get("low_m_f_to"),
            "low_sat_from": obj.get("low_sat_from"),
            "low_sat_to": obj.get("low_sat_to"),
            "low_sun_from": obj.get("low_sun_from"),
            "low_sun_to": obj.get("low_sun_to"),
            "k_wp": obj.get("kWp"),
            "house_fuse": obj.get("houseFuse"),
            "load_management": obj.get("loadManagement"),
            "common_seasons": CommonSeasons.from_dict(obj.get("commonSeasons")) if obj.get("commonSeasons") is not None else None,
            "high_tariff": obj.get("highTariff"),
            "is_winter_time_enabled": obj.get("isWinterTimeEnabled"),
            "low_tariff": obj.get("lowTariff"),
            "provider": obj.get("provider"),
            "tariff_type": obj.get("tariffType"),
            "winter_season": WinterSeason.from_dict(obj.get("winterSeason")) if obj.get("winterSeason") is not None else None
        })
        return _obj



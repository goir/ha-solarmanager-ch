# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from openapi_client.models.arrows_schema import ArrowsSchema
from openapi_client.models.battery import Battery

class GatewayChartDataSchema(BaseModel):
    """
    GatewayChartDataSchema
    """
    last_update: Optional[date] = Field(default=None, alias="lastUpdate")
    production: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="production in W")
    consumption: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="consumption in W")
    battery: Optional[Battery] = None
    arrows: Optional[conlist(ArrowsSchema)] = None
    __properties = ["lastUpdate", "production", "consumption", "battery", "arrows"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GatewayChartDataSchema:
        """Create an instance of GatewayChartDataSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of battery
        if self.battery:
            _dict['battery'] = self.battery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in arrows (list)
        _items = []
        if self.arrows:
            for _item in self.arrows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['arrows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GatewayChartDataSchema:
        """Create an instance of GatewayChartDataSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GatewayChartDataSchema.parse_obj(obj)

        _obj = GatewayChartDataSchema.parse_obj({
            "last_update": obj.get("lastUpdate"),
            "production": obj.get("production"),
            "consumption": obj.get("consumption"),
            "battery": Battery.from_dict(obj.get("battery")) if obj.get("battery") is not None else None,
            "arrows": [ArrowsSchema.from_dict(_item) for _item in obj.get("arrows")] if obj.get("arrows") is not None else None
        })
        return _obj



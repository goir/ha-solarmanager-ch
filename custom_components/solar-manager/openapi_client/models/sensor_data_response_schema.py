# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import datetime
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.sensor_tag_schema import SensorTagSchema

class SensorDataResponseSchema(BaseModel):
    """
    SensorDataResponseSchema
    """
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    priority: Optional[StrictInt] = Field(default=None, description="priority of the device")
    device_type: Optional[StrictStr] = Field(default=None, description=" device type")
    signal: Optional[StrictStr] = Field(default=None, description="connection status of the sensor - “connected” or“not connected”.")
    type: Optional[StrictStr] = Field(default=None, description="the type of sensor(device)")
    device_group: Optional[StrictStr] = Field(default=None, description="group of the devices")
    water_heater_type: Optional[StrictStr] = Field(default=None, alias="waterHeaterType", description="exists only for water heaters")
    ip: Optional[StrictStr] = Field(default=None, description="IP address of the device in the local network")
    mac: Optional[StrictStr] = Field(default=None, description="mac address of the device")
    created_at: Optional[datetime.datetime] = Field(default=None, alias="createdAt", description="time of creating the device")
    updated_at: Optional[datetime.datetime] = Field(default=None, alias="updatedAt", description="time of last updating the device")
    tag: Optional[SensorTagSchema] = None
    data: Optional[Dict[str, Any]] = Field(default=None, description="configuration object, specific for each device")
    __properties = ["_id", "priority", "device_type", "signal", "type", "device_group", "waterHeaterType", "ip", "mac", "createdAt", "updatedAt", "tag", "data"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SensorDataResponseSchema:
        """Create an instance of SensorDataResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tag
        if self.tag:
            _dict['tag'] = self.tag.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SensorDataResponseSchema:
        """Create an instance of SensorDataResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SensorDataResponseSchema.parse_obj(obj)

        _obj = SensorDataResponseSchema.parse_obj({
            "id": obj.get("_id"),
            "priority": obj.get("priority"),
            "device_type": obj.get("device_type"),
            "signal": obj.get("signal"),
            "type": obj.get("type"),
            "device_group": obj.get("device_group"),
            "water_heater_type": obj.get("waterHeaterType"),
            "ip": obj.get("ip"),
            "mac": obj.get("mac"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "tag": SensorTagSchema.from_dict(obj.get("tag")) if obj.get("tag") is not None else None,
            "data": obj.get("data")
        })
        return _obj



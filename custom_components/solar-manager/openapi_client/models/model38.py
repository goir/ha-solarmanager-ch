# coding: utf-8

"""
    Solar Manager external API 

    This is a Solar Manager external communication service

    The version of the OpenAPI document: 1.19.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class Model38(BaseModel):
    """
    Model38
    """
    access_token: Optional[StrictStr] = Field(default=None, alias="accessToken", description="User new access token")
    refresh_token: Optional[StrictStr] = Field(default=None, alias="refreshToken", description="User new refresh token")
    expires_in: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expiresIn", description="Access token live time in sec")
    token_type: Optional[StrictStr] = Field(default=None, alias="tokenType", description="HTTP authentication scheme ")
    access_claims: Optional[conlist(StrictStr)] = Field(default=None, alias="accessClaims", description="User role")
    __properties = ["accessToken", "refreshToken", "expiresIn", "tokenType", "accessClaims"]

    class Config:
        """Pydantic configuration"""
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model38:
        """Create an instance of Model38 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model38:
        """Create an instance of Model38 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model38.parse_obj(obj)

        _obj = Model38.parse_obj({
            "access_token": obj.get("accessToken"),
            "refresh_token": obj.get("refreshToken"),
            "expires_in": obj.get("expiresIn"),
            "token_type": obj.get("tokenType"),
            "access_claims": obj.get("accessClaims")
        })
        return _obj


